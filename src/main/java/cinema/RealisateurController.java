package cinema;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import cinema.Realisateur;
import cinema.RealisateurRepository;
import org.springframework.web.util.UriComponentsBuilder;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/real") // This means URL's start with /demo (after Application path)
public class RealisateurController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RealisateurRepository realisateurRepository;
    public static final Logger logger = LoggerFactory.getLogger(RealisateurController.class);


    @PostMapping(path="/") // Map ONLY POST Requests
    public ResponseEntity<?> addNewReal (@RequestBody Realisateur real, UriComponentsBuilder ucBuilder) {
        logger.info("create new real");

        if(realisateurRepository.existsByNomAndPrenom(real.getNom(), real.getPrenom())){
            logger.info("Real already exists !");
            return new ResponseEntity("Acteur already exists", HttpStatus.CONFLICT);
        }
        logger.info("Real doesn't already exists, continuing...");
        realisateurRepository.save(real);

        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/acteur/{id}").buildAndExpand(real.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<Realisateur> getAllReals() {
        // This returns a JSON or XML with the users
        return realisateurRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<?> getSingleReal(@PathVariable("id") long id) {
        logger.info("Fetching Acteur with id {}", id);
        Realisateur r = realisateurRepository.findOne(id);
        if(r == null){
            logger.error("Real with id {} not found.", id);
            return new ResponseEntity("Realisateur not found", HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<Realisateur>(r, HttpStatus.OK);
    }

    @PutMapping(path="/{id}") // Map ONLY PUT Requests
    public ResponseEntity<?> updateRealisateur (@RequestBody Realisateur real, @PathVariable("id") long id) {
        logger.info("update real id {}", id);
        Realisateur currentReal = realisateurRepository.findOne(id);
        if(currentReal == null){
            logger.error("Real with id {} not found.", id);
            return new ResponseEntity("Realisateur not found", HttpStatus.NOT_FOUND);
        }
        currentReal.setNom(real.getNom());
        currentReal.setPrenom(real.getPrenom());

        realisateurRepository.save(currentReal);

        return new ResponseEntity<Realisateur>(currentReal, HttpStatus.OK);
    }

    @DeleteMapping(path="/{id}")
    public ResponseEntity<?> deleteSingleReal(@PathVariable("id") long id) {
        logger.info("deleting Real with id {}", id);
        Realisateur r = realisateurRepository.findOne(id);
        if(r == null){
            logger.error("Realisateur with id {} not found.", id);
            return new ResponseEntity("Realisateur doesn't exist, nothing to do.", HttpStatus.OK);
        }
        realisateurRepository.delete(id);
        return new ResponseEntity<String>("Realisateur deleted", HttpStatus.OK);
    }
}