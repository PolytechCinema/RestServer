package cinema;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import cinema.Acteur;
import cinema.ActeurRepository;
import org.springframework.web.util.UriComponentsBuilder;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/acteur") // This means URL's start with /demo (after Application path)
public class ActeurController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ActeurRepository acteurRepository;
    public static final Logger logger = LoggerFactory.getLogger(ActeurController.class);


    @PostMapping(path="/") // Map ONLY POST Requests
    public ResponseEntity<?> addNewActeur (@RequestBody Acteur acteur, UriComponentsBuilder ucBuilder) {
        logger.info("create new acteur");

        if(acteurRepository.existsByNomAndPrenom(acteur.getNom(), acteur.getPrenom())){
            logger.info("Acteur already exists !");
            return new ResponseEntity("Acteur already exists", HttpStatus.CONFLICT);
        }
        logger.info("Acteur doesn't already exists, continuing...");
        logger.info("trying to save acteur : "+acteur.getId()+ " " + acteur.getPrenom() + " "+acteur.getNom()+ " " + acteur.getDateNaiss()+ " "+ acteur.getDateDeces());
        acteurRepository.save(acteur);

        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/acteur/{id}").buildAndExpand(acteur.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<Acteur> getAllActeurs() {
        // This returns a JSON or XML with the users
        return acteurRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<?> getSingleActeur(@PathVariable("id") long id) {
        logger.info("Fetching Acteur with id {}", id);
        Acteur a = acteurRepository.findOne(id);
        if(a == null){
            logger.error("Acteur with id {} not found.", id);
            return new ResponseEntity("Acteur not found", HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<Acteur>(a, HttpStatus.OK);
    }

    @PutMapping(path="/{id}") // Map ONLY PUT Requests
    public ResponseEntity<?> updateActeur (@RequestBody Acteur acteur, @PathVariable("id") long id) {
        logger.info("update acteur id {}", id);
        Acteur currentActeur = acteurRepository.findOne(id);
        if(currentActeur == null){
            logger.error("Acteur with id {} not found.", id);
            return new ResponseEntity("Acteur not found", HttpStatus.NOT_FOUND);
        }
        currentActeur.setNom(acteur.getNom());
        currentActeur.setPrenom(acteur.getPrenom());
        currentActeur.setDateDeces(acteur.getDateDeces());
        currentActeur.setDateNaiss(acteur.getDateNaiss());

        acteurRepository.save(currentActeur);

        return new ResponseEntity<Acteur>(currentActeur, HttpStatus.OK);
    }

    @DeleteMapping(path="/{id}")
    public ResponseEntity<?> deleteSingleActeur(@PathVariable("id") long id) {
        logger.info("deleting Acteur with id {}", id);
        Acteur a = acteurRepository.findOne(id);
        if(a == null){
            logger.error("Acteur with id {} not found.", id);
            return new ResponseEntity("Acteur doesn't exist, nothing to do.", HttpStatus.OK);
        }
        acteurRepository.delete(id);
        return new ResponseEntity<String>("Acteur deleted", HttpStatus.OK);
    }
}