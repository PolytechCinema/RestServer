package cinema;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * Created by Andzura on 23/01/2018.
 */

@Controller    // This means that this class is a Controller
@RequestMapping(path="/cat") // This means URL's start with /demo (after Application path)
public class CategorieController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategorieRepository categorieRepository;
    public static final Logger logger = LoggerFactory.getLogger(CategorieController.class);


    @PostMapping(path="/") // Map ONLY POST Requests
    public ResponseEntity<?> addNewCategorie (@RequestBody Categorie cat, UriComponentsBuilder ucBuilder) {
        logger.info("create new Categorie");

        if(categorieRepository.existsByCode(cat.getCode())){
            logger.info("Categorie already exists !");
            return new ResponseEntity("Categorie already exists", HttpStatus.CONFLICT);
        }

        categorieRepository.save(cat);
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/cat/{code}").buildAndExpand(cat.getCode()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }

    @GetMapping(path="/")
    public @ResponseBody
    Iterable<Categorie> getAllCategories() {
        // This returns a JSON or XML with the users
        return categorieRepository.findAll();
    }

    @GetMapping(path="/{code}")
    public ResponseEntity<?> getSingleCategorie(@PathVariable("code") String code) {
        logger.info("Fetching categorie with code {}" , code);
        Categorie cat = categorieRepository.findOneByCode(code);
        if(cat == null){
            logger.error("Categorie not found");
            return new ResponseEntity("Categorie not found", HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<Categorie>(cat, HttpStatus.OK);
    }

    @PutMapping(path="/{code}") // Map ONLY PUT Requests
    public ResponseEntity<?> updateCategorie (@RequestBody Categorie cat, @PathVariable("code") String code) {
        logger.info("update categorie code {}", code);
        Categorie currentCat =  categorieRepository.findOneByCode(code);
        if(currentCat == null){
            logger.error("categorie with code {} not found.", code);
            return new ResponseEntity("Categorie not found", HttpStatus.NOT_FOUND);
        }
        currentCat.setLibelle(cat.getLibelle());


        categorieRepository.save(currentCat);

        return new ResponseEntity<Categorie>(currentCat, HttpStatus.OK);
    }

    @DeleteMapping(path="/{code}")
    public ResponseEntity<?> deleteSingleCategorie(@PathVariable("code") String code) {
        logger.info("deleting Categorie with code {}", code);
        Categorie cat = categorieRepository.findOneByCode(code);
        if(cat == null){
            logger.error("Categorie with code {}  not found.", code);
            return new ResponseEntity("Categorie doesn't exist, nothing to do.", HttpStatus.OK);
        }
        categorieRepository.delete(cat);
        return new ResponseEntity<String>("Categorie deleted", HttpStatus.OK);
    }
}
